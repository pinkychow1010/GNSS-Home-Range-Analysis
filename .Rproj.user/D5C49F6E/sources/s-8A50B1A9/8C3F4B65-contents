---
title: "Gorilla Home Range"
output:
  flexdashboard::flex_dashboard:
    social: menu
    source_code: embed
    orientation: columns
    vertical_layout: fill
runtime: shiny
resource_files:
- rwa_adm0_2006_NISR_WGS1984_20181002.cpg
- rwa_adm0_2006_NISR_WGS1984_20181002.dbf
- rwa_adm0_2006_NISR_WGS1984_20181002.prj
- rwa_adm0_2006_NISR_WGS1984_20181002.sbn
- rwa_adm0_2006_NISR_WGS1984_20181002.sbx
- rwa_adm0_2006_NISR_WGS1984_20181002.shp
---
<style>                     
.navbar {
  background-color:#2a3d26;
  border-color:#232a28;
}
.navbar-brand {
color:#f9ffe9!important;
}
</style>    

<style>
body  {
background-image: url("https://www.visitrwanda.com/wp-content/uploads/fly-images/145/banner-1-1920x1208.jpg");background-color: #cccccc;background-size: cover;resize:both}
</style>

<style>
  .box {
  background-color: #ffffff; opacity: 0.8;
  }
</style>

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())

library(flexdashboard)
library(shiny)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(plotly)
library(dplyr)
library(magrittr)
library(rhandsontable)
library(shinyalert)

source("analysisFunctions.R")
```

```{r}
useShinyalert(rmd = TRUE)
```

# Main Page

## Column {data-width=300}

###

```{r}
actionButton("helpBtn", " Get Instructions ", width = "40%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")
```
```{r}
observeEvent(input$helpBtn, {
  shinyalert(title = "Welcome!", 
             text = "This the customized dashboard for Gorilla home range analysis! Here you can go to 'Computing Tool' to upload a csv file. The table will be render on the right size and analysis will begin. The results are distributed in the 'Home Range Analysis', 'Group Dynamics', and 'Walking Distance' panels. From 'Data Availability' you can check the time stamps of the input data. Clicking 'Help' button in each panel will provide further instructions.")})

```

<br>

<p>
<font face="Georgia" size="3em" color="#232a28">This dashboard is an analysis tool to compute and visualize home range data of Mountain Gorillas collected by GNSS sensors from [<bold>Dian Fossey Gorilla Fund International</bold>](https://gorillafund.org/). The observed Gorillas are located at the Volcanoes National Park, Rwanda. This analysis tool enables:</font> 
</p>

<p>
<ul>
  <li><font face="Georgia" size="3em" color="#232a28">Compute home range sizes, walking distances, and overlap areas</font></li>
  <li><font face="Georgia" size="3em" color="#232a28">Export statistical data tables and spatial results</font></li>
  <li><font face="Georgia" size="3em" color="#232a28">Data visualization of home range analysis</font></li>
</ul>
</p>

<p>
License: https://creativecommons.org/licenses/by-nc/3.0/

Author: [Ka Hei Chow](http://students.eagle-science.org/students/students-2020/ka-hei/)
</p>

<br>

<br>

<style>
div.relative {
  position: relative;
  left: 5px;
  bottom: 20px;
}
</style>

<div class="relative">
![](https://www.gorillasafaricompany.com/wp-content/uploads/2019/03/logo-dian-fossey.png){width=70%}
</div>

## Column {data-width=700}

```{r picture, echo = F, out.width = '100%'}
knitr::include_graphics("https://splendoursofafricatours.com/uploads/destination_detail/22/volcanoes-Park-Rwanda-Banner.jpg")
```

# Computing Tool

## Sidebar {.sidebar} {data-width=200} { .box }

```{r}
actionButton("help_tool", " Help ", width = "40%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")

observeEvent(input$help_tool, {
  shinyalert(title = "Hi!", 
             text = "This panel is where you can upload your csv file. Please check the requirements before uploading! Analysis will automatically begin.")})

```


```{r, echo = FALSE}

example_ds <- GPS2df("Gorilla_ranging_Jan_May_21.csv")
  
dataset_raw <- eventReactive(input$file1,{
  dataset_raw <- GPS2df(input$file1$datapath)
})

fileInput(
  "file1", "To use the computing tool for home range analysis, please upload a CSV file",
  multiple = TRUE,
  accept = c("text/csv",
             "text/comma-separated-values,text/plain",
             ".csv")
  )

# checkboxInput("example", "Use Sample Dataset", value = TRUE, width = "100%")

```

```{r}

renderUI({
  dataset_raw <- dataset_raw()
  data_end <- max(dataset_raw$date)
  data_start <- min(dataset_raw$date)
  dateRangeInput("dateRange", "Date Select", format = 
                   "yyyy-mm-dd", start=data_start, 
                 end=data_end, min = data_start,
                 max = data_end)
})


```

```{r, echo = FALSE}

dataset <- reactive({
  dataset_raw <- dataset_raw()
  dataset_raw %>%
  filter(date >= input$dateRange[1] & 
           date <= input$dateRange[2])
})


```


<font face="Georgia" size="3.5em" color="#232a28"><bold>Required Format:</bold> 
<li>Please make sure the uploaded file is .csv, not .xlsx</li>
<li>The csv file need to have 6 columns, including the following keywords</li> 
<li>'Longitude','Latitude','Altitude','Date','GORILLA_GROUP','LABEL'</li>
<li>The column names are case insensitive</li>
<li>CRS need to be +init=epsg:32735</li>
<li>Date column in the format of '%d-%b-%y'</li>
<br>
<bold>**The uploaded table will be display in the right panel.</bold>
</font> 

## {data-width=800}

### { .box }
```{r}

renderTable({
  dataset <- dataset()
  dataset$date <- as.Date(dataset$date, 
                             origin = "1970-01-01")
  dataset
    })

```


# Data Availability

## {data-width=200}

### { .box }

```{r}
actionButton("help_time", " Help ", width = "40%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")

observeEvent(input$help_time, {
  shinyalert(title = "Hi!", 
             text = "In this panel you can see the time stamps of the input data from the csv file. You might need to wait a few moments until the results are updated. You can either copy or download a csv file for the statistics in the table.")})

```

<font face="Georgia" size="4em" color="#232a28">This panel derive the availability of GNSS data for all Gorilla group in a grouped boxplot. It indicates how representative is the collected data in the studied period. The statistics are derived from the date column of the csv file.</font>

## {data-width=800}

### { .box }

```{r}

data_box <- reactive({
  dataset <- dataset()
  ggplot(dataset, aes(x=date,
                      y=id, 
                      fill=id)) + 
    geom_boxplot(show.legend = FALSE) + 
    scale_color_brewer(palette="Dark2") + 
    xlab("Date Time") +  # x label
    ylab("Group") +  # y label
    ggtitle("GNSS Data Availability", subtitle = waiver()) + 
    theme(text = element_text(size=16))
})

renderPlot({
  data_box()
  })

```


# Statistics {data-navmenu="Home Range Analysis"}

## {data-width=200}

### { .box }

```{r}
actionButton("help_stat", " Help ", width = "40%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")

observeEvent(input$help_stat, {
  shinyalert(title = "Hi!", 
             text = "In this panel you can check the size of home range for different gorilla groups. You can either copy or download a csv file for the statistics in the table.")})

```


<font face="Georgia" size="4em" color="#232a28">The collected GNSS data is used to calculate the home range of the Mountain Gorillas using Kernel density estimator with bivariate normal kernel using 95% of estimated distribution. Key statistics by Gorilla group are shown in this panel.</font>

## {data-width=300}

```{r}

total_home_range <- round(ttlHR(example_ds),1)
areadf <- gpHR(example_ds)
max_area <- round(max(areadf$area),1)
min_area <- round(min(areadf$area),1)
mean_area <- round(mean(areadf$area),1)

```

### Max Size (km²) {.value-box}

```{r}

max_hr <- reactive({
  dataset <- dataset()
  areadf <- gpHR(dataset)
  round(max(areadf$area),1)
})

renderValueBox({
  val <- formatC(max_hr(), digits = 1, format = "f")
  valueBox(val, icon="ion-stats-bars", color="#5f8111")
})

```


### Min Size (km²) {.value-box}

```{r}
min_hr <- reactive({
  dataset <- dataset()
  areadf <- gpHR(dataset)
  round(min(areadf$area),1)
})

renderValueBox({
  val <- formatC(min_hr(), digits = 1, format = "f")
  valueBox(val, icon="ion-stats-bars", color="#a3ca61")
})

```

### Mean Size (km²) {.value-box}

```{r}
mean_hr <- reactive({
  dataset <- dataset()
  areadf <- gpHR(dataset)
  round(mean(areadf$area),1)
})

renderValueBox({
  val <- formatC(mean_hr(), digits = 1, format = "f")
  valueBox(val, icon="ion-android-home", color="#5f8111")
})

```

### Total Coverage (km²) {.value-box}

```{r}
ttl_hr <- reactive({
  dataset <- dataset()
  round(ttlHR(dataset),1)
})

renderValueBox({
  val <- formatC(ttl_hr(), digits = 1, format = "f")
  valueBox(val, icon="ion-android-locate", color="#a3ca61")
})

```

## {data-width=500}

### Home Range Size Data Table

```{r functions}
nice_datatable <- function(df, caption = NULL, ...) {
  df %>%
    datatable(
      extensions = c("Buttons", "FixedHeader", "Scroller"),
      filter = "top",
      rownames = FALSE,
      escape = FALSE,
      caption = caption,
      options =
        list(
          dom = "Brtip",
          deferRender = FALSE,
          scrollY = 300,
          scroller = TRUE,
          scrollX = TRUE,
          fixedHeader = FALSE,
          buttons = c("copy", "csv"),
          pageLength = nrow(df),
          lengthChange = FALSE,
          ...
        )
    )
}
```

```{r}

hr_table <- reactive({
  dataset <- dataset()
  areadf <- gpHR(dataset)
  nice_datatable(areadf %>% mutate_if(is.numeric, round, 2))
})

renderDT(hr_table())

```

# Map {data-navmenu="Home Range Analysis"}

## {data-width=600}

###

```{r}
actionButton("help_map", " Help ", width = "40%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")

observeEvent(input$help_map, {
  shinyalert(title = "Hi!", 
             text = "In this panel displays the spatial reuslts for home ranges.")})

```


```{r}
#Interactive Map

m <- reactive({
   dataset <- dataset()
   map <- mapDisplay(dataset)
})
   
renderLeaflet({
    m()@map %>% setView(29.49, -1.5, zoom = 13)
})


```

## {data-width=400}

###

```{r}
#Overview Map

knitr::include_graphics("https://www.berggorilla.org/fileadmin/_processed_/4/e/csm_volcano_national_park_f577bb5a63.png")
```

###
```{r}
#Bar Chart: Home Range Size

fig1 <- reactive({
  dataset <- dataset()
  areadf <- gpHR(dataset)
  areaBar(areadf)
})

renderPlotly({
  ggplotly(fig1(), tooltip=c("x","y")) %>%
    config(displayModeBar = FALSE)
})

```

# Group Dynamics

## {data-width=200}

### { .box } 

```{r}
actionButton("help_gp", " Help ", width = "55%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")

observeEvent(input$help_gp, {
  shinyalert(title = "Hi!", 
             text = "This panel display how different gorilla group interacts. Do their home range overlap? In what extent? What is the relationship between their home range size and interactions? You can either copy or download a csv file for the statistics in the table.")})

```


<font face="Georgia" size="4em" color="#232a28">This panel display information about how home range of different Mountain Gorilla groups overlap with each other. It includes a heatmap showing the interactions among groups, as well as a scatter plot to illustrate the relationship between home range size and total share of home range.</font>

## {data-width=500}

###

```{r}
fig2 <- reactive({
  dataset <- dataset()
  overlapBar(dataset)
})

renderPlotly({
  ggplotly(fig2(), tooltip=c("y")) %>% 
  config(displayModeBar = FALSE)
})

```

###

```{r}

fig3 <- reactive({
  dataset <- dataset()
  dynamicViz(dataset)
})

renderPlotly({
  ggplotly(fig3()) %>% config(displayModeBar = FALSE)
})

```

## {data-width=300} {.tabset }

### Interactions

```{r}

fig4 <- reactive({
  dataset <- dataset()
  GPheatmap(dataset)
})

renderPlot({
  invisible(fig4())
})

```

### Data Table

```{r}

gp_dynamics <- reactive({
  dataset <- dataset()
  gp_dyn_df <- overlapAnalysis(dataset)
  names(gp_dyn_df) <- c("Primary Group","Home Range Size of Primary Group","Interacting Group","Home Range Overlapped Area","Percentage to Size of Primary Group")
  nice_datatable(gp_dyn_df %>% 
                   mutate_if(is.numeric, round, 2))
})

renderDT(gp_dynamics())

```

# Walking Distance

## {data-width=200}

### { .box }


```{r}
actionButton("help_dist", " Help ", width = "40%", icon("info-circle"), 
    style="color: #fff; background-color: #6cb733; border-color: #247526")

observeEvent(input$help_dist, {
  shinyalert(title = "Hi!", 
             text = "This panel shows the daily walking distance with the statistics including maximum, mean and minimum. You can rank the variable by clicking on the arrow next to the column names. You can either copy or download a csv file for the statistics in the table.")})

```


<font face="Georgia" size="4em" color="#232a28">This panel display the results for walking distance analysis. The geo-referenced locations from the csv file is used to compute the Euclidean distance between points which is following by daily aggregation. The results are shown in a boxplot to display the distribution.</font>

## {data-width=400}

### 

```{r}

library(data.table)
library(geosphere)
library(spdplyr)

dist_df <- function(df,crs="+init=epsg:32735",par=95,areaUnit="km2") { # take data frame for visulization on map
  poly <- getSPDF(df,crs=crs,par=par,areaUnit=areaUnit) # get spatial polygon
  df.sp <- df[, c("id", "date","x", "y")] # get by group data frame
  coordinates(df.sp) <- c("x", "y")
  proj4string(df.sp) <- CRS(crs)
  loc <- df.sp
  
  geo_proj = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
  loc_wgs = spTransform(loc,geo_proj)
  gp_name <- unique(loc$id)
  
  for (i in gp_name){
  gp_loc <- SpatialPoints(data.frame(x = 0, y = 0))[-1,]
  gp_loc <- loc_wgs[loc_wgs$id == i,]
  names(gp_loc) <- c("id","date")
  
  start <- gp_loc[-1,]
  end <- gp_loc[-length(loc_wgs),]
  
  start.long <- start$x
  start.lat <- start$y
  end.long <- end$x
  end.lat <- end$y

  dist <- data.frame(cbind(
  start.long,start.lat,end.long,end.lat,loc_wgs[-1,]$date))
 
  dist <- dist %>% mutate(dist_km = distGeo(
  matrix(c(start.long, start.lat), ncol = 2),
  matrix(c(end.long, end.lat), ncol = 2))/1000)
  
  daily_dist <- aggregate(dist$dist_km, by=list(dist$V5),
                          FUN=sum)
  names(daily_dist) <- c("date","dist")
  
  daily_dist$date <- as.Date(daily_dist$date, 
                             origin = "1970-01-01")
  daily_dist$id <- i

  if (exists('dist_all_gp') && is.data.frame(get('dist_all_gp')) == TRUE){
    dist_all_gp <- dplyr::bind_rows(dist_all_gp,daily_dist)
  } else {
    dist_all_gp <- daily_dist
  }
}
return (dist_all_gp)
}


dist_box <- function(df,crs="+init=epsg:32735",par=95,areaUnit="km2") {
  dist_all_gp <- dist_df(df,crs=crs,par=par,areaUnit=areaUnit)
  fig <- ggplot(dist_all_gp, 
         aes(x=dist, y=reorder(id, dist, FUN = mean), fill=id)) + 
    geom_boxplot(show.legend = FALSE) + 
    scale_color_brewer(palette="Dark2") + 
    xlab("Distance (km)") +  # x label
    ylab("Group") +  # y label
    ggtitle("Daily Walking Distance", subtitle = waiver()) + 
    theme(text = element_text(size=14))
 
 return (fig)
}

fig5 <- reactive({
  dataset <- dataset()
  dist_box(dataset)
})

renderPlot({
  fig5()
})

```


## {data-width=400}

###

```{r}

dist_stat <- reactive({
  dataset <- dataset()
  dist_df(dataset) %>% 
  group_by(id) %>%
  summarise(
  mean = mean(dist),
  max = max(dist),
  min = min(dist)
) %>% 
    mutate_if(is.numeric, round, 2) %>% 
    nice_datatable()
})

renderDT(dist_stat())

```

# References

<style>
  .ref {
  background-image: url("https://www.zagasexplorer.com/assets/destinations-uganda-bwindi-impenetrable-forest-national-park.jpg");background-size: cover;resize: both;
  }
</style>

### { .ref }

<ul>

<font face="Georgia" size="4em" color="#ffffff">
<bold>

<li>Calenge C (2006). “The package adehabitat for the R software: tool for the analysis of space and habitat use by animals.” Ecological Modelling, 197, 1035.</li>

<li>Tétreault, M., Franke, A. (2017). Home range estimation: examples of estimator effects. Applied raptor ecology: essentials from Gyrfalcon research. The Peregrine Fund, Boise, Idaho, USA, 207-242.</li>

<li>Walter,D., Fischer,J.W.,(2016). Home Range Estimation. In Manual of Applied Spatial Ecology (pp. 72–105). essay, Walter Applied Spatial Ecology Laboratory.</li>
</bold>

</font>

</ul>
